apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
/**
 * YCNOTE : kapt
 *
 * kapt 를 사용하면 의존성에 annotationProcessor 로 설정된 부분은 모두 kapt 로 변경해야 합니다.
 * 마찬가지로 testAnnotationProcessor 는 kaptTest 로 변경해야 합니다.
 */
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.ycengine.post"
        minSdkVersion 19
        /**
         * YCNOTE : 마시멜로우 - targetSdkVersion
         *
         * 지금 마시멜로우 폰에서 플레이스토어에 있는 내 앱을 설치하면 오류가 발생할까요?
         * 그렇지 않습니다.
         * 안드로이드에서 targetSdkVersion 이 23버전보다 아래라면 앱이 설치되면 모든 권한이 허용되어있는 상태에서 시작합니다.
         * 아직 마음의 준비가 안되셨다면 targetSdkVersion 을 22로 두고 개발하세요.
         * 단, 이미 targetSdkVersion 을 23으로 올리셨다면 22로 내릴수 없습니다.
         * 하지만 위에서 언급한것처럼 사용자가 직접 설정페이지에서 해당 권한을 거부할 수도 있습니다.
         * 사용자가 수동으로 설정페이지에서 권한을 없애버리면 내 앱은 오류가 발생할까요?
         * 앱이 오류가 발생해서 죽지는 않습니다. 해당 권한을 사용하는 기능을 사용하지 못할뿐입니다.
         * 현재 배포되어있는 앱은 오류를 방지하기위한 최소한의 장치로 생각하고 우리는 최대한 빨리 마시멜로우 권한획득에 관한 대응을 해놓아야 합니다.
         */
        targetSdkVersion 28
        /**
         * YCNOTE : MultiDex
         *
         * minSdkVersion 이 21 이상으로 설정되어 있을 경우 아래와 같이 모듈 수준의 build.gradle 파일에서 multiDexEnabled 를 true 로 설정하기만 하면 됩니다.
         * 그러나 minSdkVersion 이 20 이하로 설정되어 있으면 다음과 같이 multidex 지원 라이브러리를 사용해야 합니다.
         * implementation 'com.android.support:multidex:1.0.3'
         */
        multiDexEnabled true
        versionCode 46
        versionName "0.4.6"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }
    buildTypes {
        debug {
            // Proguard
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            /**
             * YCNOTE : 프로가드(proguard)
             *
             * 하드코딩한 string type 의 요소들은 난독화 되지 않는다.
             * 그러니 코드를 작성할 때 string 을 하드코딩하지않고 따로 상수 클래스에 모아서 사용하는 것을 추천한다.
             *
             * minifyEnabled - true = proguard 적용, false = proguard 미 적용
             * proguard-android.txt 는 android SDK 폴더의 tools/proguard/proguard-android.txt 에서 수정 할 수 있다.
             * 추가로 규칙을 정의해 별도로 *-rules.pro 파일을 아래와 같이 적용시켜 주면 기본설정을 변경하지 않고 추가 설정을 할 수 있다
             */
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles 'proguard-rules.pro'
            proguardFiles 'retrofit2.pro'
            proguardFiles 'jackson.pro'
            proguardFiles 'glide.pro'
            proguardFiles 'okhttp.pro'
            proguardFiles 'kotlin-coroutines.pro'
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java/']
        }
        test {
            java.srcDirs = ['src/test/java/']
        }
        androidTest {
            java.srcDirs = ['src/androidTest/java/']
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "POST-${variant.name}-${variant.versionName}.apk"
        }
    }
    dataBinding {
        enabled = true
    }
    dexOptions {
        // dex 의 크기를 늘리기 위한 설정(2^16개 초과)
        jumboMode true
        // 앱 구동 시 자바 할당 힙을 지정
        javaMaxHeapSize "4g"
    }
    // YCISSUE : More than one file was found with OS independent path 'META-INF/rxjava.properties'
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    // 직렬화 어노테이션 @Parcelize 을 쓰기 위한 처리
    androidExtensions {
        experimental = true
    }
}

dependencies {
    final support_library_version = '28.0.0'
    final retrofit_version = '2.5.0'
    final jackson_version = '2.9.8'
    final glide_version = '4.8.0'
    final architecture_components_version = '1.1.1'
    final architecture_components_paging_version = '1.0.1'

    // Common
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$support_library_version"
    implementation "com.android.support:design:$support_library_version"
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    // YCISSUE : All com.android.support libraries must use the exact same version specification - with Firebase
    implementation "com.android.support:support-media-compat:$support_library_version"
    implementation "com.android.support:support-v4:$support_library_version"
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.0"
    // Firebase : FCM(Firebase Cloud Messaging) - Google 에서 Firebase 를 인수 후 2019년까지 GCM(Google Cloud Messaging) 서비시를 제공하고 이후에는 모든 프로그램을 FCM 서비스로 변경해야함.
    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    // Test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // Log : https://github.com/JakeWharton/timber
    implementation 'com.jakewharton.timber:timber:4.7.1'
    // Android Architecture Components : LifeCycle & LiveData & ViewModel
    implementation "android.arch.lifecycle:runtime:$architecture_components_version"
    implementation "android.arch.lifecycle:extensions:$architecture_components_version"
    kapt "android.arch.lifecycle:compiler:$architecture_components_version"
    // Android Architecture Components : Room
    implementation "android.arch.persistence.room:runtime:$architecture_components_version"
    implementation "android.arch.persistence.room:rxjava2:$architecture_components_version"
    kapt "android.arch.persistence.room:compiler:$architecture_components_version"
    // Android Architecture Components : Paging
    implementation "android.arch.paging:runtime:$architecture_components_paging_version"
    implementation "android.arch.paging:rxjava2:$architecture_components_paging_version"
    // Retrofit2 : https://github.com/square/retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-jackson:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'
    // Jackson : https://github.com/FasterXML/jackson-module-kotlin & jackson-databind
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    // Rx : https://github.com/ReactiveX/RxJava & RxAndroid
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    // Glide : https://github.com/bumptech/glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    // Permission
    implementation 'gun0912.ted:tedpermission:2.0.0'
}
